(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){const hasPositionChanged=({pos:pos,prevPos:prevPos})=>Math.abs(pos-prevPos)>1;const valueInRange=({minScale:minScale,maxScale:maxScale,scale:scale})=>scale<=maxScale&&scale>=minScale;const getTranslate=({minScale:minScale,maxScale:maxScale,scale:scale})=>({pos:pos,prevPos:prevPos,translate:translate})=>valueInRange({minScale:minScale,maxScale:maxScale,scale:scale})&&hasPositionChanged({pos:pos,prevPos:prevPos})?translate+(pos-prevPos*scale)*(1-1/scale):translate;const getMatrix=({scale:scale,translateX:translateX,translateY:translateY})=>`matrix(${scale}, 0, 0, ${scale}, ${translateX}, ${translateY})`;const getScale=({scale:scale,minScale:minScale,maxScale:maxScale,scaleSensitivity:scaleSensitivity,deltaScale:deltaScale})=>{let newScale=scale+deltaScale/(scaleSensitivity/scale);newScale=Math.max(minScale,Math.min(newScale,maxScale));return[scale,newScale]};const pan=({state:state,originX:originX,originY:originY})=>{state.transformation.translateX+=originX;state.transformation.translateY+=originY;state.element.style.transform=getMatrix({scale:state.transformation.scale,translateX:state.transformation.translateX,translateY:state.transformation.translateY})};const canPan=state=>({panBy:({originX:originX,originY:originY})=>pan({state:state,originX:originX,originY:originY}),panTo:({originX:originX,originY:originY,scale:scale})=>{state.transformation.scale=scale;pan({state:state,originX:originX-state.transformation.translateX,originY:originY-state.transformation.translateY})}});const canZoom=state=>({zoom:({mouseX:mouseX,mouseY:mouseY,deltaScale:deltaScale})=>{const{left:left,top:top}=state.element.getBoundingClientRect();const{minScale:minScale,maxScale:maxScale,scaleSensitivity:scaleSensitivity}=state;const[scale,newScale]=getScale({scale:state.transformation.scale,deltaScale:deltaScale,minScale:minScale,maxScale:maxScale,scaleSensitivity:scaleSensitivity});const originX=mouseX-left;const originY=mouseY-top;const newOriginX=originX/scale;const newOriginY=originY/scale;const translate=getTranslate({scale:scale,minScale:minScale,maxScale:maxScale});const translateX=translate({pos:originX,prevPos:state.transformation.originX,translate:state.transformation.translateX});const translateY=translate({pos:originY,prevPos:state.transformation.originY,translate:state.transformation.translateY});state.element.style.transformOrigin=`${newOriginX}px ${newOriginY}px`;state.element.style.transform=getMatrix({scale:newScale,translateX:translateX,translateY:translateY});state.transformation={originX:newOriginX,originY:newOriginY,translateX:translateX,translateY:translateY,scale:newScale}}});const renderer=({minScale:minScale,maxScale:maxScale,element:element,scaleSensitivity:scaleSensitivity=100})=>{const state={element:element,minScale:minScale,maxScale:maxScale,scaleSensitivity:scaleSensitivity,transformation:{originX:0,originY:0,translateX:0,translateY:0,scale:1}};return Object.assign(state,canZoom(state),canPan(state))};module.exports={renderer:renderer}},{}]},{},[1]);
